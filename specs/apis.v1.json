{
  "openapi": "3.1.0",
  "info": {
    "title": "net2phone API",
    "description": "<style>\nli {\n  font-size: var(--font-size-regular);\n}\nimg {\n  display: block;\n  margin: 0 auto;\n  max-width: 75% !important;\n}\ntable {\n  margin: 20px auto !important;\n}\n.warning {\n  font-size: 1.3rem !important;\n  vertical-align: bottom;\n}\n.note {\n  background-color: #DDEBFF;\n  border-left: 5px solid #0095FF;\n  padding: 2px 5px;\n  color: #444 !important;\n}\ndiv.note {\n  padding: 2px 5px;\n  margin-top: 10px;\n}\ndiv.note > ul {\n  padding-inline-start: 15px;\n  margin-block: unset;\n}\ndiv.note > ul > p {\n  padding-inline-start: unset;\n  margin-left: -17px;\n}\ndiv.note > ul > li {\n  margin-left: 20px;\n}\n</style>\n\n# Getting Started\n\nThe net2phone API is an HTTP web service that provides programmatic access to selected features of your net2phone account. It empowers you with the ability to create your integrations using our communication data resources, for example, call data records that contain details about phone calls.\n\nTo obtain the credentials needed for authentication and make your first request against our API, follow the steps below. And if you have any issues along the way, please reach out to [integrations@net2phone.com](mailto:integrations@net2phone.com) and we will be glad to help.\n\n### 1. Fill The Form\n\nThe first thing you will need is credentials for your application. The required application credentials consist of a **Client ID** and **Client Secret** which can be created by filling up the contact form on our home page. You'll have an option to provide a `Redirect URL` to your application. Make sure to access our [Authentication Documentation](#overview--authentication) to decide if you need that.\n\n### 2. Client Id and Client Secret\n\nYou will shortly receive an email from us with the credentials you need. These keys are unique to your application. Please keep your **Client Secret** hidden. You will exchange these keys for an **Access Token** that will permit you to make requests against the net2phone API. You may have to use only **Client Id** or both **Id** and **Secret**.\n\n### 3. API Request\n\nOnce you have an **Access Token**, you can make API requests against the net2phone API. Below is an example of how to request the `Current User` endpoint using your **Access Token** in the Authorization header. \n\n<p class=\"note\">Pay attention to the Accept header which is used for API versioning.</p>\n\n#### Request\n\n```bash\ncurl -X \"GET\" \"https://integrate.versature.com/api/users/current/\" \\\n-H 'Accept: application/vnd.integrate.v1.9.0+json' \\\n-H 'Authorization: Bearer <ACCESS TOKEN>' \\\n-H 'Content-Type: application/json; charset=utf-8'\n```\n\n#### Response\n\n```json\nHTTP/1.1 200 OK\n{\n  \"username\": \"1234\",\n  \"user\": \"1234\",\n  \"domain\": \"1234567\",\n  \"last_name\": \"Smith\",\n  \"first_name\": \"Joe\",\n  \"email\": \"noreply@net2phone.ca\",\n  \"scope\": \"basic user\"\n}\n```\n\n### 4. What's Next?\n\nNow that you have a feel for the net2phone API, we recommend that you:\n  - Have a look through our [API Documentation](/explore/apis#servers) to see all the data that is available to you.\n  - Review the [Authentication Documentation](#overview--authentication) to ensure you select the authentication flow which is best for your application.\n\n<br />\n<hr />\n<br />\n<hr />\n\n# Authentication\n\nThe net2phone API uses the industry-standard OAuth 2.0 for authorization. If you are unfamiliar with this protocol, please take a moment to do so by visiting <a href=\"https://oauth.net/2/\" target=\"_blank\">OAuth 2.0</a>.\n\nOn the <a href=\"https://oauth.net/code/\" target=\"_blank\">same page</a>, you will find libraries in different languages that will help to implement OAuth 2.0 based auth.\n\n### Table of Content\n\n- [Choosing The Authentication Flow](#choosing-the-authentication-flow)\n  - [Authorization Code Grant](#authorization-code-grant)\n  - [Resource Owner Password](#resource-owner-password)\n  - [Implicit](#implicit)\n- [Token Types](#token-types)\n  - [Access Token](#access-token)\n  - [Refresh Token](#refresh-token)\n  - [Token Response](#token-response)\n\n<h2 id=\"choosing-the-authentication-flow\"> Choosing The Authentication Flow </h2>\n\n| Authentication Flow | Type of Application | Application Example |\n| -------- | ------------------- | ------------------- |\n| Authorization Code Flow | Web application with access to the backend code | A PHP web application that allows net2phone users to get a list of their calls and add information to each one |\n| Resource Owner Password Flow | Background service (machine-to-machine) | A background job that processes all account CDRs each month and exports it to an email |\n| Implicit Flow | Front-end only applications or native apps | A React Single Page application that gets a list of all calls for a specific user and allows the user to filter and download it |\n\n<h3 id=\"authorization-code-grant\">Authorization Code Grant</h3>\n\nIn this type of grant, your server-side application changes an Authorization Code for an **Access Token**. To use this flow, you will need to fill out the form and register a redirect URL with N2P to acquire the **Client ID** and **Client Secret**.\n\nOnce that is done, your application will direct users to the authorization endpoint with their **Client ID** and **redirect URL** where they will be able to authenticate with their net2phone credentials. After being authenticated, the users will be redirected to your **redirect URL** and a unique code will be provided. Your backend server will use this code along with your **Client ID**, **Client Secret**, and **redirect URL** to obtain an **Access** and **Refresh Token** for the authenticated user.\n\n![Authorization Code Grant Diagram](/images/documentation/auth/authorization-code-grant.png)\n\n#### Authentication Steps\n\n1. A user clicks the Login link within your application.\n2. Redirect the user to the authorization endpoint `https://integrate.versature.com/oauth/authorize/` with the following parameters:\n  \n<table>\n  <thead>\n    <tr>\n      <th>Field</th>\n      <th>Type</th>\n      <th style=\"max-width: 70%; width: 70%\">Description</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td>response_type</td>\n      <td>string</td>\n      <td>Use the value <code>code</code></td>\n    </tr>\n    <tr>\n      <td>client_id</td>\n      <td>string</td>\n      <td>Your integration unique client ID</td>\n    </tr>\n    <tr>\n      <td>redirect_uri</td>\n      <td>string</td>\n      <td>Your redirect URL</td>\n    </tr>\n    <tr>\n      <td>state</td>\n      <td>string (Optional)</td>\n      <td>A value used by the client to maintain the state between the request and the callback. For example: if a non-authenticated user visits a protected page in your application (<code>https://yourapp.com/users/25</code>), he will then be redirected to the Authentication page. The state can hold this original URL, so that after being authenticated, he can return to where he wished to proceed.</td>\n    </tr>\n  </tbody>\n</table>\n\nSo, the redirect endpoint will end up looking like this:\n\n```\nhttps://integrate.versature.com/api/oauth/authorize/?response_type=code&client_id=0123456789&redirect_uri=https://www.example.com/callback/&state=a0b1c2d3e4f5g6h7i8j9\n```\n\n3. The user will be prompted to authenticate with their N2P credentials and allow the access:\n\n![Login Screen](/images/documentation/auth/login-screen.png)\n\n4. The user will authenticate and consent the access.\n\n5. The user will then be redirected to your redirect URL with a temporary code (valid for 60 seconds only) and the state (if supplied).\n\n6. Your integration will then request an **Access Token** and a **Refresh Token** for the user with a POST request the following endpoint with your **Client ID**, **code**, **redirect URL**, and **grant_type**:\n\n```bash\ncurl -X \"POST\" \"https://integrate.versature.com/api/oauth/token/\" \\\n    -H 'Content-Type: application/json' \\\n    -d $'{\n          \"client_id\": \"1234567890\",\n          \"code\": \"a1b2c3d4e5f6g7h8i9j0\",\n          \"redirect_uri\": \"https://developer.net2phone.com/\",\n          \"grant_type\": \"authorization_code\"\n        }'\n```\n\n7. Your application will receive the **Access Token** and the **Refresh Token**.\n\n<h3 id=\"resource-owner-password\">Resource Owner Password</h3>\n\nIf you are creating a backend service you can use the Password Authentication Flow.\n\n<div class=\"note\">\n  <p>Please note:</p>\n  <ul> \n    <li>This flow is <strong>NOT</strong> supposed to be used for interactive/user authentication. If you want to request a net2phone username/password from users, please use the <strong>Authorization Code Grant</strong> flow.</li>\n    <li>Store the <strong>admin user</strong> username and password securely in the backend service configuration.</li>\n  </ul>\n</div>\n\n![Resource Owner Password Grant Diagram](/images/documentation/auth/password-grant.png)\n\n#### Authentication Steps\n\n1. To obtain the **Access Token**, your integration will POST a request to the following endpoint with the admin user **username**, **password**, **client_id**, **client_secret**, and **grant_type**:\n\n```bash\ncurl -X \"POST\" \"https://integrate.versature.com/api/oauth/token/\" \\\n    -H 'Content-Type: application/json' \\\n    -d $'{\n          \"client_id\": \"1234567890\",\n          \"username\": \"5067\",\n          \"password\": \"your_awesome_password!\",\n          \"client_secret\": \"JgsSbZQfw6CVPaIJpkjfTTvPGfBq1sBAWVpGvaRlEt0TAuvfO0\",\n          \"grant_type\": \"password\"\n        }'\n```\n\n2. Your application will receive the **Access Token** and the **Refresh Token**.\n\n<h3 id=\"implicit\">Implicit</h3>\n\nIn this flow, your front-end application will redirect the user to the net2phone authorization endpoint. The user will add his credentials and give permission to the application. Then they will be redirected to your redirect URL with the **Access Token** in the URL fragment.\n\n![Implicit Grant Diagram](/images/documentation/auth/implicit-grant.png)\n\n#### Authentication Steps\n\n1. A user clicks the Login link within your application.\n\n2. Redirect the user to the authorization endpoint `https://integrate.versature.com/oauth/authorize/` with the following parameters:\n  \n| Field | Type | Description |\n| -------- | ------------------- | ------------------- |\n| response_type | string | Use the value `token` |\n| client_id | string | Your integration unique Client ID |\n| redirect_uri | string | Your redirect URL |\n\nSo, the redirect endpoint will end up looking like this:\n\n```\nhttps://integrate.versature.com/api/oauth/authorize/?response_type=token&client_id=0123456789&redirect_uri=https://www.example.com/callback/\n```\n\n3. The user will be prompted to authenticate with their N2P credentials and allow the access:\n\n![Login Screen](/images/documentation/auth/login-screen.png)\n\n4. The user will authenticate and consent the access.\n\n5. The user will then be redirected to your redirect URL with the **Access Token** in the URL fragment.\nExample:\n```\nhttps://www.example.com/callback/#user_id=5067&access_token=fIYYaIaHkCgcaKpiM4-pKzzraojwPlUkNwGwPCptkjIED-tbBMX0miI40BJ8F-biTDZ3VfD-fwycrn-Guf9cTdFxqZ3ChxrvswldmUenyWPoxLQaNNXy10bhp4KCCIN92KN3954axuTAxZE8&expires=2021-11-04T20%3A08%3A16.326311&expires_in=3597\n```\n\n<h2 id=\"token-types\"> Token Types </h2>\n\n<h3 id=\"access-token\">Access Token</h3>\n\nIt's a specific string created by the net2phone server to inform the net2phone API that the client has been authorized to access the endpoints and perform actions according to its scope.\n\n<h3 id=\"refresh-token\">Refresh Token</h3>\n\nAs the name implies, this token allows obtaining a new **Access Token** without re-entering the client’s credentials.\n\n<div class=\"note\">\n  <p>In this case, the Authorization header takes the B64 encoded string of the Client ID and Client Secret with a colon (<code>:</code>) in between as the Bearer token. So it will be like this: <code>base64_encode(client_id:client_secret)</code>.</p>\n\n  <p>Example:</p>\n  <ul>\n    <li>regular string (before encoding): <code>1234567890:JgsSbZQfw6CVPaIJpkjfTTvPGfBq1sBAWVpGvaRlEt0TAuvfO0</code></li>\n    <li>b64 string (after encoding): <code>MTIzNDU2Nzg5MDpKZ3NTYlpRZnc2Q1ZQYUlKcGtqZlRUdlBHZkJxMXNCQVdWcEd2YVJsRXQwVEF1dmZPMA==</code></li>\n  </ul>\n</div>\n\n#### Authentication Steps\n\nYour integration will POST a request to the following endpoint with the **grant_type** and the **refresh_token**.\n\n```bash\ncurl -X \"POST\" \"https://integrate.versature.com/api/oauth/token/\" \\\n    -H 'Authorization: Bearer <B64 ENCODED CREDENTIALS>' \\\n    -H 'Content-Type: application/json; charset=utf-8' \\\n    -d $'{\n          \"refresh_token\": \"ABC382SH4028FKWNF7WGSKWI\",\n          \"grant_type\": \"refresh_token\"\n        }'\n```\n\n<p class=\"note\">New <strong>Access Tokens</strong> can be obtained upon expiry with the use of the Refresh Token grant. Once the <strong>Refresh Token</strong> expires, users will have to re-authenticate to obtain a new set of Tokens.</p>\n\n<h3 id=\"token-response\">Token Response</h3>\n\nAll flows' responses will contain:\n\n| Field | Type | Description |\n| -------- | -------- | -------- |\n| user_id | string | The user ID |\n| access_token | string | The access token to be used in the Authorization header when making requests |\n| expires | string | The datetime of the access token expiration |\n| expires_in | integer | The access token expiration time in seconds relative to the current time |\n| refresh_token | string (**Unavailable with Implicit Flow**) | The refresh token to be used when the access token has expired |\n\n```json\nHTTP/1.1 200 OK\n{\n  \"user_id\": \"123\",\n  \"access_token\": \"0l9k8j7h6g5f4d3s2a1\", \n  \"expires\": \"2021-10-15T15:44:54.058887\", \n  \"expires_in\": 3599, \n  \"refresh_token\": \"a1b2c3d4e5\"\n}\n```\n",
    "version": "1.9.0"
  },
  "servers": [
    {
      "url": "https://integrate.versature.com/api",
      "description": "Production net2phone integrate API endpoint"
    }
  ],
  "tags": [
    {
      "name": "Accounts",
      "description": "Get details of the account"
    },
    {
      "name": "Calls",
      "description": "Control your phone calls; List Active, Place, Answer, and Terminate your calls."
    },
    {
      "name": "CDRs",
      "description": "Get a list of the Call Detail Records (CDR's) for a specific member of your company or for the entire company. Filter your calls by Inbound, Outbound, Missed and get calls for a specific date range. If no CDRs are found for the query the response will be empty."
    },
    {
      "name": "Endpoints",
      "description": "List of available endpoints"
    },
    {
      "name": "Users",
      "description": "Get a list of the Users for your company or details about a specific user."
    },
    {
      "name": "Webhooks",
      "description": "Subscribe and receive webhook updates for the events you are interested in. Provide a URI which can receive POST requests. When updates occur your endpoint will then be notified. (All notifications requests contain JSON.)"
    }
  ],
  "paths": {
    "/accounts/services/": {
      "get": {
        "summary": "Account services settings",
        "description": "List of reports and general account settings",
        "responses": {
          "200": {
            "content": {
              "application/vnd.integrate.v1.9.0+json": {
                "schema": {
                  "$ref": "#/components/schemas/account_settings"
                },
                "examples": {
                  "example": {
                    "$ref": "#/components/examples/account_settings"
                  },
                  "default": {
                    "$ref": "#/components/examples/account_settings_default"
                  }
                }
              }
            },
            "description": "Success"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "422": {
            "$ref": "#/components/responses/InvalidVersion"
          },
          "429": {
            "$ref": "#/components/responses/RateLimitExceeded"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "tags": [
          "Accounts"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/Accept"
          }
        ]
      }
    },
    "/calls/": {
      "post": {
        "summary": "Place a Call",
        "description": "Place a call from the provided user/device to a given destination. Destination can be sip address or any valid phone number. E164 format is recommended.",
        "requestBody": {
          "content": {
            "application/vnd.integrate.v1.9.0+json": {
              "schema": {
                "$ref": "#/components/schemas/call"
              },
              "examples": {
                "example": {
                  "$ref": "#/components/examples/call"
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Success",
            "headers": {
              "x-RateLimit-Limit": {
                "description": "1/second, 15/minute"
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "422": {
            "$ref": "#/components/responses/InvalidVersion"
          },
          "429": {
            "$ref": "#/components/responses/RateLimitExceeded"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "tags": [
          "Calls"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/Accept"
          }
        ]
      }
    },
    "/cdrs/": {
      "get": {
        "deprecated": true,
        "summary": "Account CDRs (Termination Date: March 31, 2022)",
        "description": "Get list of all CDRs on the account",
        "parameters": [
          {
            "$ref": "#/components/parameters/Accept"
          },
          {
            "$ref": "#/components/parameters/start_date"
          },
          {
            "$ref": "#/components/parameters/end_date"
          },
          {
            "$ref": "#/components/parameters/cursor"
          },
          {
            "$ref": "#/components/parameters/limit"
          }
        ],
        "responses": {
          "200": {
            "headers": {
              "x-RateLimit-Limit": {
                "description": "5/second, 15/minute"
              }
            },
            "content": {
              "application/vnd.integrate.v1.9.0+json": {
                "schema": {
                  "$ref": "#/components/schemas/cdrs"
                },
                "examples": {
                  "example": {
                    "$ref": "#/components/examples/cdrs"
                  },
                  "recordings example": {
                    "$ref": "#/components/examples/cdrs_with_recordings"
                  }
                }
              }
            },
            "description": "Success"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "422": {
            "$ref": "#/components/responses/InvalidVersion"
          },
          "429": {
            "$ref": "#/components/responses/RateLimitExceeded"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "tags": [
          "CDRs"
        ]
      }
    },
    "/cdrs/users/": {
      "get": {
        "summary": "User CDRs",
        "description": "Get list of all user cdrs on the account",
        "parameters": [
          {
            "$ref": "#/components/parameters/Accept"
          },
          {
            "$ref": "#/components/parameters/start_date"
          },
          {
            "$ref": "#/components/parameters/end_date"
          },
          {
            "$ref": "#/components/parameters/cursor"
          },
          {
            "$ref": "#/components/parameters/page_size"
          },
          {
            "$ref": "#/components/parameters/max_duration"
          },
          {
            "$ref": "#/components/parameters/min_duration"
          },
          {
            "$ref": "#/components/parameters/phone_number"
          },
          {
            "$ref": "#/components/parameters/recording_available"
          },
          {
            "$ref": "#/components/parameters/type"
          },
          {
            "$ref": "#/components/parameters/user"
          }
        ],
        "responses": {
          "200": {
            "headers": {
              "x-RateLimit-Limit": {
                "description": "5/second, 15/minute"
              }
            },
            "content": {
              "application/vnd.integrate.v1.9.0+json": {
                "schema": {
                  "$ref": "#/components/schemas/cdrs"
                },
                "examples": {
                  "example": {
                    "$ref": "#/components/examples/cdrs"
                  },
                  "recordings example": {
                    "$ref": "#/components/examples/cdrs_with_recordings"
                  }
                }
              }
            },
            "description": "Success"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "422": {
            "$ref": "#/components/responses/InvalidVersion"
          },
          "429": {
            "$ref": "#/components/responses/RateLimitExceeded"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "tags": [
          "CDRs"
        ]
      }
    },
    "/cdrs/users/current/": {
      "get": {
        "summary": "Current user CDRs",
        "description": "Get list of all CDRs on the account for the current user",
        "parameters": [
          {
            "$ref": "#/components/parameters/Accept"
          },
          {
            "$ref": "#/components/parameters/start_date"
          },
          {
            "$ref": "#/components/parameters/end_date"
          },
          {
            "$ref": "#/components/parameters/cursor"
          },
          {
            "$ref": "#/components/parameters/page_size"
          },
          {
            "$ref": "#/components/parameters/max_duration"
          },
          {
            "$ref": "#/components/parameters/min_duration"
          },
          {
            "$ref": "#/components/parameters/phone_number"
          },
          {
            "$ref": "#/components/parameters/recording_available"
          },
          {
            "$ref": "#/components/parameters/type"
          },
          {
            "$ref": "#/components/parameters/user"
          }
        ],
        "responses": {
          "200": {
            "headers": {
              "x-RateLimit-Limit": {
                "description": "5/second, 15/minute"
              }
            },
            "content": {
              "application/vnd.integrate.v1.9.0+json": {
                "schema": {
                  "$ref": "#/components/schemas/cdrs"
                },
                "examples": {
                  "example": {
                    "$ref": "#/components/examples/cdrs"
                  },
                  "recordings example": {
                    "$ref": "#/components/examples/cdrs_with_recordings"
                  }
                }
              }
            },
            "description": "Success"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "422": {
            "$ref": "#/components/responses/InvalidVersion"
          },
          "429": {
            "$ref": "#/components/responses/RateLimitExceeded"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "tags": [
          "CDRs"
        ]
      }
    },
    "/cdrs/users/{userId}/": {
      "get": {
        "summary": "User CDRs by ID",
        "description": "Get list of all CDRs on the account for the current user",
        "parameters": [
          {
            "$ref": "#/components/parameters/Accept"
          },
          {
            "$ref": "#/components/parameters/userId"
          },
          {
            "$ref": "#/components/parameters/start_date"
          },
          {
            "$ref": "#/components/parameters/end_date"
          },
          {
            "$ref": "#/components/parameters/cursor"
          },
          {
            "$ref": "#/components/parameters/page_size"
          },
          {
            "$ref": "#/components/parameters/max_duration"
          },
          {
            "$ref": "#/components/parameters/min_duration"
          },
          {
            "$ref": "#/components/parameters/phone_number"
          },
          {
            "$ref": "#/components/parameters/recording_available"
          },
          {
            "$ref": "#/components/parameters/type"
          },
          {
            "$ref": "#/components/parameters/user"
          }
        ],
        "responses": {
          "200": {
            "headers": {
              "x-RateLimit-Limit": {
                "description": "5/second, 15/minute"
              }
            },
            "content": {
              "application/vnd.integrate.v1.9.0+json": {
                "schema": {
                  "$ref": "#/components/schemas/cdrs"
                },
                "examples": {
                  "example": {
                    "$ref": "#/components/examples/cdrs"
                  },
                  "recordings example": {
                    "$ref": "#/components/examples/cdrs_with_recordings"
                  }
                }
              }
            },
            "description": "Success"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "422": {
            "$ref": "#/components/responses/InvalidVersion"
          },
          "429": {
            "$ref": "#/components/responses/RateLimitExceeded"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "tags": [
          "CDRs"
        ]
      }
    },
    "/available/endpoint/": {
      "get": {
        "summary": "Endpoints list",
        "description": "Get list of available endpoints",
        "security": [],
        "responses": {
          "200": {
            "content": {
              "application/vnd.integrate.v1.9.0+json": {
                "schema": {
                  "$ref": "#/components/schemas/endpoints"
                },
                "examples": {
                  "example": {
                    "$ref": "#/components/examples/endpoints"
                  }
                }
              }
            },
            "description": "Success"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "422": {
            "$ref": "#/components/responses/InvalidVersion"
          },
          "429": {
            "$ref": "#/components/responses/RateLimitExceeded"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "tags": [
          "Endpoints"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/Accept"
          }
        ]
      }
    },
    "/users/": {
      "get": {
        "summary": "Get details list of all users of an account",
        "responses": {
          "200": {
            "headers": {
              "x-RateLimit-Limit": {
                "description": "1/second, 15/minute"
              }
            },
            "content": {
              "application/vnd.integrate.v1.9.0+json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/user"
                  }
                },
                "examples": {
                  "example": {
                    "$ref": "#/components/examples/users"
                  }
                }
              }
            },
            "description": "Success"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "422": {
            "$ref": "#/components/responses/InvalidVersion"
          },
          "429": {
            "$ref": "#/components/responses/RateLimitExceeded"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "tags": [
          "Users"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/Accept"
          }
        ]
      }
    },
    "/users/{userId}/": {
      "get": {
        "summary": "Get the user details. If provided the id will be used to get a specific user. If not specified the authenticated user details will be returned. If you wish to retrieve all users across your domain use the \"all\" argument.",
        "parameters": [
          {
            "$ref": "#/components/parameters/Accept"
          },
          {
            "$ref": "#/components/parameters/userId"
          }
        ],
        "responses": {
          "200": {
            "headers": {
              "x-RateLimit-Limit": {
                "description": "1/second, 15/minute"
              }
            },
            "content": {
              "application/vnd.integrate.v1.9.0+json": {
                "schema": {
                  "$ref": "#/components/schemas/user"
                },
                "examples": {
                  "example": {
                    "$ref": "#/components/examples/user"
                  }
                }
              }
            },
            "description": "Success"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "422": {
            "$ref": "#/components/responses/InvalidVersion"
          },
          "429": {
            "$ref": "#/components/responses/RateLimitExceeded"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "tags": [
          "Users"
        ]
      }
    },
    "/users/current/": {
      "get": {
        "summary": "Get the user details for the authenticated user.",
        "responses": {
          "200": {
            "headers": {
              "x-RateLimit-Limit": {
                "description": "1/second, 15/minute"
              }
            },
            "content": {
              "application/vnd.integrate.v1.9.0+json": {
                "schema": {
                  "$ref": "#/components/schemas/user"
                },
                "examples": {
                  "example": {
                    "$ref": "#/components/examples/user"
                  }
                }
              }
            },
            "description": "Success"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "422": {
            "$ref": "#/components/responses/InvalidVersion"
          },
          "429": {
            "$ref": "#/components/responses/RateLimitExceeded"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "tags": [
          "Users"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/Accept"
          }
        ]
      }
    },
    "/subscriptions/": {
      "post": {
        "summary": "Creates a webhook subscription for the requested events.\nWhen an event occurs to which you are subscribed a POST request will be set to your post_uri with a JSON body indicating what occurred.",
        "requestBody": {
          "content": {
            "application/vnd.integrate.v1.9.0+json": {
              "schema": {
                "$ref": "#/components/schemas/webhook_settings"
              },
              "examples": {
                "example": {
                  "$ref": "#/components/examples/webhook_settings"
                }
              }
            }
          }
        },
        "responses": {
          "202": {
            "headers": {
              "x-RateLimit-Limit": {
                "description": "1/second, 5/minute"
              }
            },
            "description": "Accepted",
            "content": {
              "application/vnd.integrate.v1.9.0+json": {
                "schema": {
                  "$ref": "#/components/schemas/webhook_subscription"
                },
                "examples": {
                  "example": {
                    "$ref": "#/components/examples/webhook_subscription"
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "422": {
            "$ref": "#/components/responses/InvalidVersion"
          },
          "429": {
            "$ref": "#/components/responses/RateLimitExceeded"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "callbacks": {
          "CallRinging": {
            "$ref": "#/components/callbacks/call_ringing"
          },
          "CallAnswered": {
            "$ref": "#/components/callbacks/call_answered"
          },
          "CallCompleted": {
            "$ref": "#/components/callbacks/call_completed"
          }
        },
        "tags": [
          "Webhooks"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/Accept"
          }
        ]
      }
    },
    "/subscriptions/{subscriptionId}/": {
      "delete": {
        "summary": "Delete a webhook subscription with the given id. Updates will no longer be sent the subscription endpoint.\nNote: Users can only delete subscriptions that they created.",
        "parameters": [
          {
            "$ref": "#/components/parameters/Accept"
          },
          {
            "$ref": "#/components/parameters/subscriptionId"
          }
        ],
        "responses": {
          "204": {
            "headers": {
              "x-RateLimit-Limit": {
                "description": "1/second, 5/minute"
              }
            },
            "description": "The webhook subscription was deleted successfully."
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "422": {
            "$ref": "#/components/responses/InvalidVersion"
          },
          "429": {
            "$ref": "#/components/responses/RateLimitExceeded"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "tags": [
          "Webhooks"
        ]
      },
      "get": {
        "summary": "Get the webhook subscription details for the given id. Can be used to verify subscribed events as well the subscription expiry date/time.\nNote: Users can only read subscriptions that they created.",
        "parameters": [
          {
            "$ref": "#/components/parameters/Accept"
          },
          {
            "$ref": "#/components/parameters/subscriptionId"
          }
        ],
        "responses": {
          "200": {
            "headers": {
              "x-RateLimit-Limit": {
                "description": "1/second, 5/minute"
              }
            },
            "content": {
              "application/vnd.integrate.v1.9.0+json": {
                "schema": {
                  "$ref": "#/components/schemas/webhook_subscription"
                },
                "examples": {
                  "example": {
                    "$ref": "#/components/examples/webhook_subscription"
                  }
                }
              }
            },
            "description": "Success"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "422": {
            "$ref": "#/components/responses/InvalidVersion"
          },
          "429": {
            "$ref": "#/components/responses/RateLimitExceeded"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "tags": [
          "Webhooks"
        ]
      }
    }
  },
  "components": {
    "schemas": {
      "account_settings": {
        "title": "Account Settings",
        "description": "Details for the settings for the account",
        "type": "object",
        "properties": {
          "report_generation_settings": {
            "type": "object",
            "properties": {
              "call_queue_split": {
                "description": "Call queue split report will be generated",
                "type": "string",
                "nullable": true,
                "enum": [
                  "True",
                  "False"
                ]
              },
              "call_queue": {
                "description": "Call queue report will be generated",
                "type": "string",
                "nullable": true,
                "enum": [
                  "True",
                  "False"
                ]
              },
              "call_queue_agent": {
                "description": "Call queue agent report will be generated",
                "type": "string",
                "nullable": true,
                "enum": [
                  "True",
                  "False"
                ]
              },
              "reports": {
                "description": "List of all enabled reports",
                "type": "array",
                "uniqueItems": true,
                "items": {
                  "properties": {
                    "gmt_offset": {
                      "description": "GMT offset for the report",
                      "type": "number"
                    },
                    "name": {
                      "description": "Name of the report",
                      "type": "string",
                      "nullable": true
                    },
                    "interval": {
                      "description": "Interval for the report",
                      "type": "number"
                    },
                    "queue": {
                      "description": "ID of the queue",
                      "type": "string",
                      "nullable": true
                    },
                    "key": {
                      "description": "Unique ID of the report",
                      "type": "string",
                      "pattern": "/^[0-9a-f]{8}(?:-[0-9a-f]{4}){3}-[0-9a-f]{12}$/gm"
                    },
                    "timezone": {
                      "description": "Timezone of the report",
                      "type": "string"
                    },
                    "type": {
                      "description": "Type of the report",
                      "type": "string",
                      "enum": [
                        "call_queue_split_report",
                        "call_queue_agent_report",
                        "call_queue_report"
                      ]
                    }
                  }
                }
              }
            }
          },
          "long_term_recording_storage": {
            "description": "Long term recording storage enabled",
            "type": "boolean",
            "default": false
          },
          "performance_wallboards": {
            "description": "Performance wallboards enabled",
            "type": "boolean",
            "default": false
          },
          "report_generation": {
            "description": "Report generation enabled",
            "type": "boolean",
            "default": false
          },
          "call_center_web_header": {
            "description": "Call center web header enabled",
            "type": "boolean",
            "default": false
          },
          "voice_signature": {
            "description": "Voice signature enabled",
            "type": "boolean",
            "default": false
          }
        }
      },
      "auth_token": {
        "title": "Authenticated",
        "description": "Access and refresh Tokens",
        "type": "object",
        "properties": {
          "refresh_token": {
            "description": "A token which can be used to obtain a new `access_token` or `jwt_token` depending on the `grant_type`.",
            "type": "string"
          },
          "jwt_token": {
            "description": "The jwt token used to authenticate requests.",
            "type": "string"
          },
          "access_token": {
            "description": "The token used to authenticate requests.",
            "type": "string"
          },
          "scope": {
            "description": "The permission level for this Access Token",
            "type": "string",
            "enum": [
              "Basic User",
              "Office Manager",
              "Call Center Supervisor",
              "Call Center User",
              "admin",
              "regular",
              "primary",
              "anonymous"
            ]
          },
          "token_type": {
            "description": "The type of token",
            "type": "string",
            "enum": [
              "Bearer"
            ]
          },
          "expires_in": {
            "description": "How many seconds until the Access Token expires.",
            "type": "integer",
            "format": "i32"
          },
          "expires": {
            "description": "When the Access Token will expire. Date Time is UTC and in ISO-8601 format.",
            "type": "string",
            "format": "date-time"
          },
          "user_id": {
            "description": "The unique ID of the user associated with this login",
            "type": "string"
          },
          "account_id": {
            "deprecated": true,
            "description": "Will always be `null` for net2phone users.",
            "type": "string",
            "enum": [
              null
            ]
          }
        }
      },
      "call": {
        "title": "Create Call",
        "type": "object",
        "description": "Body of create call request",
        "required": [
          "to"
        ],
        "properties": {
          "to": {
            "type": "string",
            "description": "The destination for this call. (Phone number, sip address)"
          },
          "from": {
            "type": "string",
            "description": "Where this call originates. Will default to current authenticated user if a value is not provided."
          },
          "auto_answer": {
            "type": "boolean",
            "default": false,
            "description": "Auto Answer - Should this caller side be auto answered. (May not be supported by the answering device)."
          },
          "automatic_number_identification": {
            "type": "boolean",
            "description": "Auto number identification -",
            "nullable": true
          },
          "caller_id_number": {
            "type": "string",
            "description": "Number to show as the call id",
            "nullable": true
          }
        }
      },
      "cdrs": {
        "title": "CDRs",
        "description": "List of CDRs that meet the query parameters",
        "type": "object",
        "properties": {
          "cursor": {
            "description": "The cursor/index from which to continue a previous request from",
            "type": "string"
          },
          "more": {
            "description": "True if there is more data available. If True use the cursor to request the next batch of data.",
            "type": "boolean"
          },
          "result": {
            "description": "A list of CDR data",
            "type": "array",
            "uniqueItems": true,
            "items": {
              "properties": {
                "start_time": {
                  "description": "Date and time the call was started (in UTC).",
                  "type": "string"
                },
                "answer_time": {
                  "description": "Date and time the call was answered (in UTC).",
                  "type": "string"
                },
                "end_time": {
                  "description": "Date and time the call was ended (in UTC).",
                  "type": "string"
                },
                "duration": {
                  "description": "How many seconds the call lasted.",
                  "type": "number"
                },
                "call_type": {
                  "description": "The type of call.",
                  "type": "string",
                  "enum": [
                    "Incoming",
                    "Outgoing",
                    "On Net"
                  ]
                },
                "domain": {
                  "description": "Domain associated with this call.",
                  "type": "string"
                },
                "has_recording_been_analyzed": {
                  "description": "Has cdr been processed for transcription and/or redaction",
                  "type": "boolean"
                },
                "to": {
                  "description": "The destination side of the call.",
                  "type": "object",
                  "properties": {
                    "username": {
                      "description": "The user@domain for the user associated with a call leg.",
                      "type": "string"
                    },
                    "domain": {
                      "description": "Domain associated with this call.",
                      "type": "string"
                    },
                    "e164": {
                      "description": "The e164 phone number associated with a call leg.",
                      "type": "string"
                    },
                    "user": {
                      "description": "The extension of the user associated with this call leg.",
                      "type": "string"
                    },
                    "recordings": {
                      "description": "A collection of recordings associated with a call leg",
                      "type": "array",
                      "items": {
                        "properties": {
                          "status": {
                            "description": "The status for of this recording.",
                            "type": "object",
                            "properties": {
                              "message": {
                                "description": "Associated message for the status.",
                                "type": "string",
                                "nullable": true
                              },
                              "name": {
                                "description": "The name/state for a given recording.",
                                "type": "string",
                                "enum": [
                                  "Processing",
                                  "Available",
                                  "No Recording",
                                  "Deleted",
                                  "Archived",
                                  "Ignored"
                                ]
                              },
                              "processing_error": {
                                "description": "True if there was an error in processing the recording",
                                "type": "boolean",
                                "default": false
                              },
                              "time": {
                                "description": "Time of recording",
                                "type": "string",
                                "format": "date-time"
                              }
                            },
                            "is_processed": {
                              "description": "Has recording been processed",
                              "type": "boolean"
                            },
                            "url": {
                              "description": "A url to download the recording from",
                              "type": "string"
                            },
                            "is_available": {
                              "description": "True if a recording is available for download",
                              "type": "boolean"
                            },
                            "processing_error": {
                              "description": "True if there was an error in processing the recording",
                              "type": "boolean"
                            },
                            "recording_id": {
                              "description": "A unique id for a given recording",
                              "type": "string"
                            },
                            "has_recording_been_analyzed": {
                              "description": "Has the recording been processed",
                              "type": "boolean"
                            }
                          }
                        }
                      }
                    },
                    "has_recording_been_analyzed": {
                      "description": "Has the recording been processed.",
                      "type": "boolean"
                    },
                    "uri": {
                      "description": "The connected origination/termination device or number in full sip uri format.",
                      "type": "string"
                    },
                    "call_id": {
                      "description": "The unique identifier for one side of the call.",
                      "type": "string"
                    }
                  }
                },
                "from": {
                  "type": "object",
                  "properties": {
                    "username": {
                      "description": "The user@domain for the user associated with a call leg.",
                      "type": "string"
                    },
                    "domain": {
                      "description": "Domain associated with this call.",
                      "type": "string"
                    },
                    "name": {
                      "description": "The name of the user associated with a call leg.",
                      "type": "string"
                    },
                    "recordings": {
                      "description": "A collection of recordings associated with a call leg",
                      "type": "array",
                      "items": {
                        "properties": {
                          "status": {
                            "description": "The status for of this recording.",
                            "type": "object",
                            "properties": {
                              "message": {
                                "description": "Associated message for the status.",
                                "type": "string",
                                "nullable": true
                              },
                              "name": {
                                "description": "The name/state for a given recording.",
                                "type": "string",
                                "enum": [
                                  "Processing",
                                  "Available",
                                  "No Recording",
                                  "Deleted",
                                  "Archived",
                                  "Ignored"
                                ]
                              },
                              "processing_error": {
                                "description": "True if there was an error in processing the recording",
                                "type": "boolean",
                                "default": false
                              },
                              "time": {
                                "description": "Time of recording",
                                "type": "string",
                                "format": "date-time"
                              }
                            },
                            "is_processed": {
                              "description": "Has recording been processed",
                              "type": "boolean"
                            },
                            "url": {
                              "description": "A url to download the recording from",
                              "type": "string"
                            },
                            "is_available": {
                              "description": "True if a recording is available for download",
                              "type": "boolean"
                            },
                            "processing_error": {
                              "description": "True if there was an error in processing the recording",
                              "type": "boolean"
                            },
                            "recording_id": {
                              "description": "A unique id for a given recording",
                              "type": "string"
                            },
                            "has_recording_been_analyzed": {
                              "description": "Has the recording been processed",
                              "type": "boolean"
                            }
                          }
                        }
                      }
                    },
                    "user": {
                      "description": "The extension of the user associated with this call leg.",
                      "type": "string"
                    },
                    "e164": {
                      "description": "The e164 phone number associated with a call leg.",
                      "type": "string"
                    },
                    "has_recording_been_analyzed": {
                      "description": "Has the recording been processed.",
                      "type": "boolean"
                    },
                    "uri": {
                      "description": "The connected origination/termination device or number in full sip uri format.",
                      "type": "string"
                    },
                    "call_id": {
                      "description": "The unique identifier for one side of the call.",
                      "type": "string"
                    }
                  }
                },
                "by": {
                  "description": "The by side of the call.",
                  "type": "object",
                  "properties": {
                    "username": {
                      "description": "The user@domain for the user associated with a call leg",
                      "type": "string",
                      "nullable": true
                    },
                    "domain": {
                      "description": "Domain associated with this call.",
                      "type": "string",
                      "nullable": true
                    },
                    "user": {
                      "description": "The extension of the user associated with this call leg.",
                      "type": "string",
                      "nullable": true
                    },
                    "value": {
                      "description": "The sip address or e164 number associated with a call leg",
                      "type": "string",
                      "nullable": true
                    }
                  }
                }
              }
            }
          }
        }
      },
      "endpoints": {
        "title": "Available endpoints",
        "description": "List of available endpoints",
        "type": "array",
        "uniqueItems": true,
        "items": {
          "description": "Endpoint descriptions",
          "type": "string",
          "enum": [
            "password_grant",
            "refresh_token_grant",
            "place_call",
            "read_subscription",
            "delete_subscription",
            "create_subscription",
            "refresh_subscription",
            "cdrs"
          ]
        }
      },
      "user": {
        "title": "User Details",
        "type": "object",
        "description": "Details of the user",
        "required": [
          "username",
          "user",
          "first_name",
          "last_name",
          "email",
          "scope"
        ],
        "properties": {
          "username": {
            "type": "string",
            "description": "The user identifier"
          },
          "user": {
            "type": "string",
            "description": "The user's extension"
          },
          "first_name": {
            "type": "string",
            "description": "The first name of the user"
          },
          "last_name": {
            "type": "string",
            "description": "The last name of the user"
          },
          "email": {
            "type": "string",
            "description": "The email address of the user"
          },
          "domain": {
            "type": "string",
            "description": "The domain for the user"
          },
          "time_zone": {
            "type": "string",
            "description": "The time zone this user resides in"
          },
          "scope": {
            "type": "string",
            "description": "The role of this user",
            "enum": [
              "Basic User",
              "Office Manager",
              "Call Center Supervisor",
              "Call Center User",
              "admin",
              "regular",
              "primary",
              "anonymous"
            ]
          }
        }
      },
      "webhook_call": {
        "title": "Call Webhook",
        "description": "A call subscription will result in Post request to your subscribed endpoint on call state changes for the subscribed user and company. The ringing event will show one side as `ringing` and the other as `progressing`.\n* `progressing` - call is waiting for the other side\n* `ringing` - endpoint is ringing\n* `active` - call is up\n* `ended` - call terminated",
        "type": "object",
        "properties": {
          "calls": {
            "type": "object",
            "properties": {
              "on_net": {
                "description": "If call was between net2phone sip devices.",
                "type": "boolean"
              },
              "from": {
                "description": "Where the call originated",
                "type": "object",
                "properties": {
                  "call_id": {
                    "description": "The unique id of this call.",
                    "type": "string"
                  },
                  "id": {
                    "description": "The phone number or device/ext. Phone numbers will be in E164 notation.",
                    "type": "string"
                  },
                  "user": {
                    "description": "The extension/user id. `null` if a net2phone user is not involved.",
                    "type": "string",
                    "nullable": true
                  },
                  "name": {
                    "description": "Name of the extension/user",
                    "type": "string",
                    "nullable": true
                  },
                  "domain": {
                    "description": "The customer/company associated with this call. Null if a net2phone domain is not involved on the given endpoint.",
                    "nullable": true
                  },
                  "state": {
                    "description": "The state of this call.",
                    "type": "string",
                    "enum": [
                      "progressing",
                      "ringing",
                      "active",
                      "ended"
                    ]
                  }
                }
              },
              "to": {
                "description": "The destination of the call.",
                "type": "object",
                "properties": {
                  "is_human": {
                    "description": null,
                    "type": "boolean"
                  },
                  "call_id": {
                    "description": "The unique id of this call.",
                    "type": "string"
                  },
                  "id": {
                    "description": "The phone number or device/ext. Phone numbers will be in E164 notation.",
                    "type": "string"
                  },
                  "user": {
                    "description": "The extension/user id. `null` if a net2phone user is not involved.",
                    "type": "integer",
                    "format": "int32",
                    "nullable": true
                  },
                  "domain": {
                    "description": "The customer/company associated with this call. Null if a net2phone domain is not involved on the given endpoint.",
                    "nullable": true
                  },
                  "state": {
                    "description": "The state of this call.",
                    "type": "string",
                    "enum": [
                      "progressing",
                      "ringing",
                      "active",
                      "ended"
                    ]
                  }
                }
              },
              "time_answer": {
                "description": "When the end user picked up the call. `null` for ringing event.",
                "type": "string",
                "format": "date-time",
                "nullable": true
              },
              "time_start": {
                "description": "When this call initialized.",
                "type": "string",
                "format": "date-time"
              },
              "by_call_id": {
                "description": "An intermediary call id. Used in when the call is transferred from one party to another.",
                "type": "string"
              }
            }
          }
        }
      },
      "webhook_settings": {
        "required": [
          "post_uri"
        ],
        "type": "object",
        "properties": {
          "post_uri": {
            "type": "string",
            "description": "The endpoint which is notified when an event occurs.",
            "format": "uri"
          },
          "expires_in": {
            "type": "integer",
            "format": "int32",
            "description": "The number of seconds until the webhook subscription expires",
            "default": 7200,
            "maximum": 604800
          },
          "calls": {
            "type": "boolean",
            "description": "Subscribe to call events",
            "default": false
          },
          "cdrs": {
            "type": "boolean",
            "default": false,
            "description": "Subscribe to CDR events"
          },
          "recordings": {
            "type": "boolean",
            "description": "Subscribe to recording events",
            "default": false
          },
          "user": {
            "type": "string",
            "description": "One or more users to subscribe to. Omit to subscribe to all users webhooks.\nAppend multiple times to subscribe to multiple users.",
            "default": "*"
          }
        }
      },
      "webhook_subscription": {
        "type": "object",
        "required": [
          "id"
        ],
        "properties": {
          "id": {
            "type": "integer",
            "description": "The unique id of this subscription",
            "format": "int32"
          },
          "post_uri": {
            "type": "string",
            "description": "The endpoint which is notified when an event occurs.",
            "format": "uri"
          },
          "events": {
            "type": "array",
            "uniqueItems": true,
            "items": {
              "required": [
                "type",
                "user"
              ],
              "properties": {
                "type": {
                  "type": "string",
                  "enum": [
                    "calls",
                    "cdrs",
                    "recordings"
                  ]
                },
                "user": {
                  "type": "string",
                  "default": "*"
                }
              }
            }
          },
          "enabled": {
            "type": "boolean",
            "description": "Indicates if subscription is enabled"
          }
        }
      }
    },
    "responses": {
      "Unauthorized": {
        "description": "Unauthorized",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "status": {
                  "type": "integer",
                  "format": "int32",
                  "required": true,
                  "enum": [
                    401
                  ]
                },
                "message": {
                  "type": "string",
                  "required": true,
                  "enum": [
                    "Invalid Vendor"
                  ]
                }
              }
            },
            "example": {
              "status": 401,
              "message": "Invalid Vendor"
            }
          }
        }
      },
      "Forbidden": {
        "description": "Forbidden",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "status": {
                  "type": "integer",
                  "format": "int32",
                  "required": true,
                  "enum": [
                    403
                  ]
                },
                "message": {
                  "type": "string",
                  "required": true,
                  "enum": [
                    "Access Forbidden, you do not have the correct permissions."
                  ]
                }
              }
            },
            "example": {
              "status": 403,
              "message": "Access Forbidden, you do not have the correct permissions."
            }
          }
        }
      },
      "NotFound": {
        "description": "Not Found",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "status": {
                  "type": "integer",
                  "format": "int32",
                  "required": true,
                  "enum": [
                    404
                  ]
                },
                "message": {
                  "type": "string",
                  "required": true,
                  "enum": [
                    "Resource does not exist."
                  ]
                }
              }
            },
            "example": {
              "status": 404,
              "message": "Resource does not exist."
            }
          }
        }
      },
      "InvalidVersion": {
        "description": "Invalid Version",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "status": {
                  "type": "integer",
                  "format": "int32",
                  "required": true,
                  "enum": [
                    422
                  ]
                },
                "message": {
                  "type": "string",
                  "required": true,
                  "enum": [
                    "An invalid version number was provided."
                  ]
                }
              }
            },
            "example": {
              "status": 422,
              "message": "An invalid version number was provided."
            }
          }
        }
      },
      "RateLimitExceeded": {
        "description": "Rate Limit Exceeded",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "string"
                }
              }
            },
            "examples": {
              "rate limit per second exceeded": {
                "value": {
                  "message": "1 per 1 second"
                }
              },
              "rate limit per minute exceeded": {
                "value": {
                  "message": "1 per 1 minute"
                }
              }
            }
          }
        }
      },
      "InternalServerError": {
        "description": "Internal Server Error",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "status": {
                  "type": "integer",
                  "format": "int32",
                  "required": true,
                  "enum": [
                    500
                  ]
                },
                "message": {
                  "type": "string",
                  "required": true,
                  "enum": [
                    "An error occurred while marshalling the response."
                  ]
                }
              }
            },
            "example": {
              "status": 500,
              "message": "An error occurred while marshalling the response."
            }
          }
        }
      }
    },
    "parameters": {
      "Accept": {
        "name": "Accept",
        "required": true,
        "in": "header",
        "description": "The media type and version which is acceptable for the response",
        "schema": {
          "type": "string",
          "enum": [
            "application/vnd.integrate.v1.9.0+json"
          ]
        }
      },
      "Authorization": {
        "name": "Authorization",
        "required": true,
        "in": "header",
        "description": "The bearer token",
        "schema": {
          "type": "string",
          "enum": [
            "Bearer 0l9k8j7h6g5f4d3s2a1"
          ]
        }
      },
      "callId": {
        "name": "callId",
        "in": "path",
        "description": "The ID of the call",
        "required": true,
        "schema": {
          "type": "string"
        }
      },
      "subscriptionId": {
        "name": "subscriptionId",
        "in": "path",
        "description": "The ID of the subscription",
        "required": true,
        "schema": {
          "type": "integer",
          "format": "int32"
        }
      },
      "userId": {
        "name": "userId",
        "in": "path",
        "description": "Id of the user",
        "required": true,
        "schema": {
          "type": "integer",
          "format": "int32"
        }
      },
      "access_token": {
        "name": "access_token",
        "in": "query",
        "required": true,
        "description": "The token used to authenticate requests.",
        "schema": {
          "type": "string"
        }
      },
      "client_id": {
        "name": "client_id",
        "in": "query",
        "required": true,
        "description": "The id of the client. The unique identifier for your application.",
        "schema": {
          "type": "string"
        }
      },
      "client_secret": {
        "name": "client_secret",
        "in": "query",
        "required": false,
        "description": "The secret provided for your client application.",
        "schema": {
          "type": "string"
        }
      },
      "cursor": {
        "name": "cursor",
        "in": "query",
        "description": "The cursor/index from which to continue a previous request from",
        "schema": {
          "type": "string"
        }
      },
      "end_date": {
        "name": "end_date",
        "in": "query",
        "description": "Get calls which ended after this time. In UTC if timezone not specified. If no start date is provided resutls for calls after this end date will be returned.",
        "schema": {
          "type": "string",
          "format": "date-time"
        }
      },
      "start_date": {
        "name": "start_date",
        "in": "query",
        "description": "Get calls which started after this time. In UTC if timezone not specified.",
        "required": true,
        "schema": {
          "type": "string",
          "format": "date-time"
        }
      },
      "max_duration": {
        "name": "max_duration",
        "in": "query",
        "description": "Filter cdrs by maximum duration",
        "schema": {
          "type": "integer",
          "format": "int32",
          "nullable": true
        }
      },
      "min_duration": {
        "name": "min_duration",
        "in": "query",
        "description": "Filter cdrs by minimum duration",
        "schema": {
          "type": "integer",
          "format": "int32",
          "nullable": true
        }
      },
      "limit": {
        "name": "limit",
        "in": "query",
        "description": "number of returned items",
        "schema": {
          "type": "integer",
          "format": "int32",
          "minimum": 1,
          "maximum": 100,
          "default": 10
        }
      },
      "page_size": {
        "name": "page_size",
        "in": "query",
        "description": "number of returned items",
        "schema": {
          "type": "integer",
          "format": "int32",
          "minimum": 1,
          "maximum": 100,
          "default": 10
        }
      },
      "phone_number": {
        "name": "phone_number",
        "in": "query",
        "description": "Flter cdrs by phone number used",
        "schema": {
          "type": "string"
        }
      },
      "recording_available": {
        "name": "recording_available",
        "in": "query",
        "description": "Filter cdrs to only include ones with recordings",
        "schema": {
          "type": "boolean",
          "default": false
        }
      },
      "refresh_token": {
        "name": "refresh_token",
        "in": "query",
        "required": false,
        "description": "The token used to obtain a new Access Token for the user.",
        "schema": {
          "type": "string"
        }
      },
      "state": {
        "name": "state",
        "in": "query",
        "description": "**recommended** A value used by the client to maintain state between the request and the callback. Used to help prevent cross-site request forgery.",
        "schema": {
          "type": "string"
        }
      },
      "grant_type": {
        "name": "grant_type",
        "in": "query",
        "required": true,
        "description": "The type of grant being performed.",
        "schema": {
          "type": "string",
          "enum": [
            "authorization_code",
            "refresh_token",
            "password"
          ]
        }
      },
      "response_type": {
        "name": "response_type",
        "in": "query",
        "required": true,
        "description": "The type of grant response to be performed.",
        "schema": {
          "type": "string",
          "enum": [
            "code"
          ]
        }
      },
      "type": {
        "name": "type",
        "in": "query",
        "description": "The type of phone call which took place.",
        "schema": {
          "type": "string",
          "enum": [
            "incoming",
            "outgoing",
            "on net"
          ]
        }
      },
      "redirect_uri": {
        "name": "redirect_uri",
        "in": "query",
        "required": true,
        "description": "The redirect URI used to authenticate this user.",
        "schema": {
          "type": "string"
        }
      },
      "user": {
        "name": "user",
        "in": "query",
        "description": "The user/extension to retrieve the call records for. Append multiple times to filter by multiple users.",
        "schema": {
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "headers": {},
    "examples": {
      "account_settings_default": {
        "value": {
          "report_generation_settings": {
            "call_queue_split": null,
            "call_queue": null,
            "call_queue_agent": null,
            "reports": null
          },
          "long_term_recording_storage": false,
          "performance_wallboards": false,
          "report_generation": false,
          "call_center_web_header": false,
          "voice_signature": false
        }
      },
      "account_settings": {
        "value": {
          "report_generation_settings": {
            "call_queue_split": "True",
            "call_queue": "True",
            "call_queue_agent": "True",
            "reports": [
              {
                "gmt_offset": 4,
                "name": null,
                "interval": 30,
                "queue": "8814",
                "key": "646907a3-0a1b-4a19-b03b-2962a65e4dc9",
                "timezone": "US/Eastern",
                "type": "call_queue_split_report"
              },
              {
                "gmt_offset": 0,
                "name": "Test report",
                "interval": 30,
                "queue": "8814",
                "key": "54ed5415-7536-bd71-c3fc-02e64b190170",
                "timezone": "Pacific/Niue",
                "type": "call_queue_agent_report"
              },
              {
                "gmt_offset": 0,
                "name": "New Report",
                "interval": 0,
                "queue": null,
                "key": "c4c88231-c02d-435a-9f52-7c07d25cf4af",
                "timezone": "Pacific/Niue",
                "type": "call_queue_report"
              }
            ]
          },
          "long_term_recording_storage": true,
          "performance_wallboards": false,
          "report_generation": true,
          "call_center_web_header": false,
          "voice_signature": true
        }
      },
      "auth_token": {
        "value": {
          "domain": "yourdomain.com",
          "user_id": "110",
          "account_id": null,
          "access_token": "6ca982bf-5f34-7e09-480b-7ca5d6246e5c",
          "expires": "2021-05-03T10:19:37.822793",
          "expires_in": 1094,
          "token_type": "Bearer",
          "jwt_token": "eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCJ9.eyJleHAiOjE0ODc5NzU0NTgsImlSHORTENED",
          "scope": "Basic User",
          "refresh_token": "YRjxLpsjRqL7zYuKstXogqioA_P3Z4fiEuga0NCVRcDSc8cy_9msxg"
        }
      },
      "call": {
        "value": {
          "to": "+16133246100",
          "from": "100@mydomain.com",
          "caller_id_number": null,
          "auto_answer": true,
          "automatic_number_identification": null
        }
      },
      "cdrs_with_recordings": {
        "value": {
          "cursor": "asdfasdfasdfasdf#asdfasdfs==",
          "more": true,
          "result": [
            {
              "to": {
                "domain": null,
                "user": null,
                "has_recording_been_analyzed": false,
                "value": "+16133246100",
                "call_id": "20210503030052031111-436c626c08717949a56705103ea809c0"
              },
              "domain": "yourdomain.com",
              "from": {
                "domain": "yourdomain.com",
                "name": "Jane Doe",
                "recordings": [
                  {
                    "status": {
                      "message": null,
                      "name": "Available",
                      "processing_error": false,
                      "time": "Monday, 3 Jun 2018 19:05:45 -0000"
                    },
                    "is_processed": true,
                    "url": "https://versature-integrate.appspot.com/api/recordings/93bc0b9a43a6458acced84a6fc4cf270/recording/",
                    "is_available": true,
                    "processing_error": false,
                    "recording_id": "93bc0b9a43a6458acced84a6fc4cf270",
                    "has_recording_been_analyzed": false
                  }
                ],
                "user": "101",
                "has_recording_been_analyzed": false,
                "uri": "sip:16133246100@yourdomain.com",
                "value": "+16133246100",
                "call_id": "20180503030052031111-436c626c08717949a56705103ea809c0"
              },
              "end_time": "2018-05-03T15:08:01+00:00",
              "answer_time": "2018-05-03T14:02:49+00:00",
              "duration": 312,
              "start_time": "2018-05-03T14:02:45+00:00",
              "has_recording_been_analyzed": false,
              "call_type": "Outgoing"
            }
          ]
        }
      },
      "cdrs": {
        "value": [
          {
            "duration": 111,
            "start_time": "2021-05-01T03:00:49+00:00",
            "end_time": "2021-05-01T03:02:54+00:00",
            "to": {
              "domain": "yourdomain.com",
              "e164": "+16133246100",
              "user": null,
              "call_id": "20210503030052031111-436c626c08717949a56705103ea809c0"
            },
            "from": {
              "domain": "yourdomain.com",
              "call_id": "20210503030052031111-06f03fea68d5e32ff07831a419fdfcab",
              "e164": "+16133246111",
              "user": "111",
              "name": "John Doe"
            }
          }
        ]
      },
      "endpoints": {
        "value": [
          "password_grant",
          "refresh_token_grant",
          "place_call",
          "read_subscription",
          "delete_subscription",
          "create_subscription",
          "refresh_subscription",
          "cdrs"
        ]
      },
      "user": {
        "value": {
          "username": "110@example.com",
          "user": "100",
          "domain": "example.com",
          "last_name": "Smith",
          "first_name": "John",
          "email": "noreply@versature.com",
          "time_zone": "Canada/Eastern",
          "scope": "Office Manager"
        }
      },
      "users": {
        "value": [
          {
            "username": "110@example.com",
            "user": "100",
            "domain": "example.com",
            "last_name": "Smith",
            "first_name": "John",
            "email": "noreply@versature.com",
            "time_zone": "US/Pacific",
            "scope": "Basic User"
          },
          {
            "username": "220@example.com",
            "user": "220",
            "domain": "example.com",
            "last_name": "Brown",
            "first_name": "Jane",
            "email": "yesreply@versature.com",
            "time_zone": "US/Eastern",
            "scope": "Office Manager"
          }
        ]
      },
      "webhook_call_answered": {
        "value": {
          "on_net": false,
          "from": {
            "user": null,
            "state": "active",
            "name": null,
            "domain": null,
            "id": "+16133246100",
            "call_id": "ea5537bf1fd8eb53e8b435592f86a539"
          },
          "to": {
            "is_human": true,
            "state": "active",
            "id": "126",
            "domain": "yourdomain.com",
            "user": "126",
            "call_id": "ac68b6fb9072dd2aa32b5e9098330b72"
          },
          "time_answer": "2021-11-24 13:50:22",
          "time_start": "2021-11-24 13:50:12",
          "by_call_id": null
        }
      },
      "webhook_call_completed": {
        "value": {
          "on_net": false,
          "from": {
            "user": "120",
            "state": "ended",
            "name": "John Doe",
            "domain": "yourdomain.com",
            "id": "+16133246100",
            "call_id": "ea5537bf1fd8eb53e8b435592f86a539"
          },
          "to": {
            "is_human": true,
            "state": "ended",
            "id": "126",
            "domain": "yourdomain.com",
            "user": "126",
            "call_id": "ac68b6fb9072dd2aa32b5e9098330b72"
          },
          "time_answer": "2021-11-24 13:50:22",
          "time_start": "2021-11-24 13:50:12",
          "by_call_id": null
        }
      },
      "webhook_call_ringing": {
        "value": {
          "on_net": false,
          "from": {
            "user": null,
            "state": "progressing",
            "name": null,
            "domain": null,
            "id": "+16133246100",
            "call_id": "ea5537bf1fd8eb53e8b435592f86a539"
          },
          "to": {
            "is_human": true,
            "state": "ringing",
            "id": "126",
            "domain": "yourdomain.com",
            "user": "126",
            "call_id": "ac68b6fb9072dd2aa32b5e9098330b72"
          },
          "time_answer": null,
          "time_start": "2021-11-24 13:50:12",
          "by_call_id": null
        }
      },
      "webhook_settings": {
        "value": {
          "post_uri": "https://mydomain.com/webhooks",
          "expires_in": 604800,
          "calls": false,
          "cdrs": false,
          "recordings": true,
          "user": "*"
        }
      },
      "webhook_subscription": {
        "value": {
          "id": 12345,
          "post_uri": "https://mydomain.com/webhooks",
          "expires": "2021-04-29T11:45:11.110000",
          "events": [
            {
              "type": "cdrs",
              "user": "*"
            },
            {
              "type": "recordings",
              "user": "201"
            }
          ]
        }
      }
    },
    "securitySchemes": {
      "password": {
        "type": "oauth2",
        "description": "Add your net2phone credentials below in order to get a token and test the API. Please choose `Request Body` in the dropbox before clicking the `Get Token` button.",
        "x-client-id": 5126610649874432,
        "x-client-secret": "LAwJ4AqpjyiAahJYqVcKEguxPf5pbFR8HS7iRds6Wt1f1ll5xw",
        "flows": {
          "password": {
            "tokenUrl": "/oauth/token/"
          }
        }
      }
    },
    "callbacks": {
      "call_answered": {
        "{$request.query.post_uri}": {
          "post": {
            "requestBody": {
              "description": "This event is triggered when a call is answered.",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/webhook_call"
                  },
                  "examples": {
                    "example": {
                      "$ref": "#/components/examples/webhook_call_answered"
                    }
                  }
                }
              }
            },
            "responses": {
              "default": {
                "description": "The response of the webhook endpoint is discarded, webhook requests are never retried."
              }
            }
          }
        }
      },
      "call_completed": {
        "{$request.query.post_uri}": {
          "post": {
            "requestBody": {
              "description": "This event is triggered when a call is completed.",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/webhook_call"
                  },
                  "examples": {
                    "example": {
                      "$ref": "#/components/examples/webhook_call_completed"
                    }
                  }
                }
              }
            },
            "responses": {
              "default": {
                "description": "The response of the webhook endpoint is discarded, webhook requests are never retried."
              }
            }
          }
        }
      },
      "call_ringing": {
        "{$request.query.post_uri}": {
          "post": {
            "requestBody": {
              "description": "This event is triggered when a call is ringing.",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/webhook_call"
                  },
                  "examples": {
                    "example": {
                      "$ref": "#/components/examples/webhook_call_ringing"
                    }
                  }
                }
              }
            },
            "responses": {
              "default": {
                "description": "The response of the webhook endpoint is discarded, webhook requests are never retried."
              }
            }
          }
        }
      }
    }
  },
  "webhooks": {},
  "security": [
    {
      "password": []
    }
  ]
}